import fs from "fs";
import path from "path";
import { promisify } from "util";

const makeDirAsync = promisify(fs.mkdir);
const writeAsyncFile = promisify(fs.writeFile);

export async function createNextProject(projectDirectory, useTypeScript, projectAuthor, projectDescription) {
    const packageContent = {
        name: path.basename(projectDirectory),
        version: "1.0.0",
        scripts: {
            dev: "next dev",
            build: "next build",
            start: "next start",
            lint: "next lint"
        },
        author: projectAuthor,
        description: projectDescription,
        dependencies: {
            "react": "^18.2.0",
            "react-dom": "^18.2.0",
            "next": "^14.1.1"
        },
        devDependencies: {
            ...(useTypeScript && {
                "typescript": "^5.0.0",
                "@types/react": "^18.0.0",
                "@types/react-dom": "^18.0.0"
            })
        }
    };

    await writeAsyncFile(
        path.join(projectDirectory, 'package.json'),
        JSON.stringify(packageContent, null, 2)
    );

    await makeDirAsync(path.join(projectDirectory, 'pages'));

    const mainFileContent = useTypeScript
        ? `import { NextPage } from 'next';\nimport Head from 'next/head';\n\nconst Home: NextPage = () => {\n  return (\n    <div>\n      <Head>\n        <title>Home</title>\n        <meta name="description" content="Generated by create next app" />\n      </Head>\n      <main>\n        <h1>Hello, TypeScript Next.js!</h1>\n      </main>\n    </div>\n  );\n};\n\nexport default Home;\n`
        : `import Head from 'next/head';\n\nconst Home = () => {\n  return (\n    <div>\n      <Head>\n        <title>Home</title>\n        <meta name="description" content="Generated by create next app" />\n      </Head>\n      <main>\n        <h1>Hello, Next.js!</h1>\n      </main>\n    </div>\n  );\n};\n\nexport default Home;\n`;
    
    const tsConfigContent = `
    {
        "compilerOptions": {
        "target": "es5",
        "lib": ["dom", "dom.iterable", "esnext"],
        "allowJs": true,
        "skipLibCheck": true,
        "strict": true,
        "forceConsistentCasingInFileNames": true,
        "noEmit": true,
        "esModuleInterop": true,
        "module": "esnext",
        "moduleResolution": "node",
        "resolveJsonModule": true,
        "isolatedModules": true,
        "jsx": "preserve",
        "incremental": true
    },
    "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
    "exclude": ["node_modules"]}`;

    const nextEnvContent = `/// <reference types="next" />\n/// <reference types="next/types/global" />\n`;

    await writeAsyncFile(
        path.join(projectDirectory, 'pages', useTypeScript ? 'index.tsx' : 'index.js'),
        mainFileContent
    );

    if (useTypeScript) {
        await writeAsyncFile(
            path.join(projectDirectory, 'tsconfig.json'),
            tsConfigContent
        );

        await writeAsyncFile(
            path.join(projectDirectory, 'next-env.d.ts'),
            nextEnvContent
        );
    }
}